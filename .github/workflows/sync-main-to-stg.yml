# .github/workflows/sync-main-to-stg.yml

name: Sync Main to Stg Branch

# Trigger the workflow on pushes to the main branch
on:
  push:
    branches:
      - main

# Grants permission to write repository content (push)
permissions:
  contents: write

# Prevent concurrent runs for the same branch to avoid race conditions
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  sync:
    name: Sync Main -> Stg
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # Fetch all history and branches, not just the triggering commit
          fetch-depth: 0
          # Use a token with write permissions
          # The default GITHUB_TOKEN often works if repo settings allow workflow write access
          # Otherwise, use a PAT stored as a secret: token: ${{ secrets.YOUR_PAT_SECRET }}

      - name: Set up Git User
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions-bot@users.noreply.github.com"

      - name: Switch to Stg Branch
        run: |
          # Check out the stg branch. Assumes it exists remotely.
          # If it might not exist, add error handling or creation logic.
          git checkout stg

      - name: Ensure Stg is Up-to-Date with Remote
        run: git pull origin stg # Ensures local stg is current before merge

      - name: Merge Main into Stg
        id: merge # Add an ID to this step to reference its outcome
        run: |
          # Attempt to merge main into the current branch (stg)
          # --no-ff: Creates a merge commit even if fast-forward is possible (optional, but can be clearer)
          # --no-edit: Uses the default merge commit message without opening an editor
          git merge origin/main --no-ff --no-edit
        # If merge conflicts occur, this step will fail the workflow

      - name: Push Changes to Stg
        run: git push origin stg

      # Optional: Handle Merge Conflicts (Basic Notification)
      # This step runs only if the merge step failed
      - name: Notify on Merge Conflict
        # Check if the job failed AND the specific merge step failed
        if: failure() && steps.merge.outcome == 'failure'
        run: |
          echo "::error::Merge conflict detected when merging main into stg. Manual resolution required."
          # You could add more advanced notifications here (e.g., Slack, issue creation)
          exit 1 # Ensure the job fails explicitly